### YamlMime:ManagedReference
items:
- uid: H.Extensions.ValueConverter
  commentId: N:H.Extensions.ValueConverter
  id: H.Extensions.ValueConverter
  children:
  - H.Extensions.ValueConverter.Converter
  - H.Extensions.ValueConverter.ConverterBase`2
  - H.Extensions.ValueConverter.ConverterBase`3
  - H.Extensions.ValueConverter.DependencyConverterBase
  - H.Extensions.ValueConverter.GetGemeotryFromStringConverter
  - H.Extensions.ValueConverter.GetWriteObjectConverter
  - H.Extensions.ValueConverter.IConvertibleConverter
  - H.Extensions.ValueConverter.IEnumerableConverterBase`2
  - H.Extensions.ValueConverter.IEnumerableConverterBase`3
  - H.Extensions.ValueConverter.IEnumerableTypeConverterBase`1
  - H.Extensions.ValueConverter.IEnumerableTypeConverterBase`2
  - H.Extensions.ValueConverter.MarkupMultiValueConverterBase
  - H.Extensions.ValueConverter.MarkupValueConverterBase
  - H.Extensions.ValueConverter.MultiConverterBase`2
  langs:
  - csharp
  - vb
  name: H.Extensions.ValueConverter
  nameWithType: H.Extensions.ValueConverter
  fullName: H.Extensions.ValueConverter
  type: Namespace
  assemblies:
  - H.Extensions.ValueConverter
references:
- uid: H.Extensions.ValueConverter.Converter
  commentId: T:H.Extensions.ValueConverter.Converter
  href: H.Extensions.ValueConverter.Converter.html
  name: Converter
  nameWithType: Converter
  fullName: H.Extensions.ValueConverter.Converter
- uid: H.Extensions.ValueConverter.ConverterBase`3
  commentId: T:H.Extensions.ValueConverter.ConverterBase`3
  href: H.Extensions.ValueConverter.ConverterBase-3.html
  name: ConverterBase<T, P, R>
  nameWithType: ConverterBase<T, P, R>
  fullName: H.Extensions.ValueConverter.ConverterBase<T, P, R>
  nameWithType.vb: ConverterBase(Of T, P, R)
  fullName.vb: H.Extensions.ValueConverter.ConverterBase(Of T, P, R)
  name.vb: ConverterBase(Of T, P, R)
  spec.csharp:
  - uid: H.Extensions.ValueConverter.ConverterBase`3
    name: ConverterBase
    href: H.Extensions.ValueConverter.ConverterBase-3.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: P
  - name: ','
  - name: " "
  - name: R
  - name: '>'
  spec.vb:
  - uid: H.Extensions.ValueConverter.ConverterBase`3
    name: ConverterBase
    href: H.Extensions.ValueConverter.ConverterBase-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: P
  - name: ','
  - name: " "
  - name: R
  - name: )
- uid: H.Extensions.ValueConverter.ConverterBase`2
  commentId: T:H.Extensions.ValueConverter.ConverterBase`2
  href: H.Extensions.ValueConverter.ConverterBase-2.html
  name: ConverterBase<T, R>
  nameWithType: ConverterBase<T, R>
  fullName: H.Extensions.ValueConverter.ConverterBase<T, R>
  nameWithType.vb: ConverterBase(Of T, R)
  fullName.vb: H.Extensions.ValueConverter.ConverterBase(Of T, R)
  name.vb: ConverterBase(Of T, R)
  spec.csharp:
  - uid: H.Extensions.ValueConverter.ConverterBase`2
    name: ConverterBase
    href: H.Extensions.ValueConverter.ConverterBase-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: R
  - name: '>'
  spec.vb:
  - uid: H.Extensions.ValueConverter.ConverterBase`2
    name: ConverterBase
    href: H.Extensions.ValueConverter.ConverterBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: R
  - name: )
- uid: H.Extensions.ValueConverter.MultiConverterBase`2
  commentId: T:H.Extensions.ValueConverter.MultiConverterBase`2
  href: H.Extensions.ValueConverter.MultiConverterBase-2.html
  name: MultiConverterBase<T, R>
  nameWithType: MultiConverterBase<T, R>
  fullName: H.Extensions.ValueConverter.MultiConverterBase<T, R>
  nameWithType.vb: MultiConverterBase(Of T, R)
  fullName.vb: H.Extensions.ValueConverter.MultiConverterBase(Of T, R)
  name.vb: MultiConverterBase(Of T, R)
  spec.csharp:
  - uid: H.Extensions.ValueConverter.MultiConverterBase`2
    name: MultiConverterBase
    href: H.Extensions.ValueConverter.MultiConverterBase-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: R
  - name: '>'
  spec.vb:
  - uid: H.Extensions.ValueConverter.MultiConverterBase`2
    name: MultiConverterBase
    href: H.Extensions.ValueConverter.MultiConverterBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: R
  - name: )
- uid: H.Extensions.ValueConverter.IConvertibleConverter
  commentId: T:H.Extensions.ValueConverter.IConvertibleConverter
  href: H.Extensions.ValueConverter.IConvertibleConverter.html
  name: IConvertibleConverter
  nameWithType: IConvertibleConverter
  fullName: H.Extensions.ValueConverter.IConvertibleConverter
- uid: H.Extensions.ValueConverter.IEnumerableConverterBase`2
  commentId: T:H.Extensions.ValueConverter.IEnumerableConverterBase`2
  href: H.Extensions.ValueConverter.IEnumerableConverterBase-2.html
  name: IEnumerableConverterBase<T, R>
  nameWithType: IEnumerableConverterBase<T, R>
  fullName: H.Extensions.ValueConverter.IEnumerableConverterBase<T, R>
  nameWithType.vb: IEnumerableConverterBase(Of T, R)
  fullName.vb: H.Extensions.ValueConverter.IEnumerableConverterBase(Of T, R)
  name.vb: IEnumerableConverterBase(Of T, R)
  spec.csharp:
  - uid: H.Extensions.ValueConverter.IEnumerableConverterBase`2
    name: IEnumerableConverterBase
    href: H.Extensions.ValueConverter.IEnumerableConverterBase-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: R
  - name: '>'
  spec.vb:
  - uid: H.Extensions.ValueConverter.IEnumerableConverterBase`2
    name: IEnumerableConverterBase
    href: H.Extensions.ValueConverter.IEnumerableConverterBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: R
  - name: )
- uid: H.Extensions.ValueConverter.IEnumerableConverterBase`3
  commentId: T:H.Extensions.ValueConverter.IEnumerableConverterBase`3
  href: H.Extensions.ValueConverter.IEnumerableConverterBase-3.html
  name: IEnumerableConverterBase<T, P, R>
  nameWithType: IEnumerableConverterBase<T, P, R>
  fullName: H.Extensions.ValueConverter.IEnumerableConverterBase<T, P, R>
  nameWithType.vb: IEnumerableConverterBase(Of T, P, R)
  fullName.vb: H.Extensions.ValueConverter.IEnumerableConverterBase(Of T, P, R)
  name.vb: IEnumerableConverterBase(Of T, P, R)
  spec.csharp:
  - uid: H.Extensions.ValueConverter.IEnumerableConverterBase`3
    name: IEnumerableConverterBase
    href: H.Extensions.ValueConverter.IEnumerableConverterBase-3.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: P
  - name: ','
  - name: " "
  - name: R
  - name: '>'
  spec.vb:
  - uid: H.Extensions.ValueConverter.IEnumerableConverterBase`3
    name: IEnumerableConverterBase
    href: H.Extensions.ValueConverter.IEnumerableConverterBase-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: P
  - name: ','
  - name: " "
  - name: R
  - name: )
- uid: H.Extensions.ValueConverter.IEnumerableTypeConverterBase`2
  commentId: T:H.Extensions.ValueConverter.IEnumerableTypeConverterBase`2
  href: H.Extensions.ValueConverter.IEnumerableTypeConverterBase-2.html
  name: IEnumerableTypeConverterBase<T, P>
  nameWithType: IEnumerableTypeConverterBase<T, P>
  fullName: H.Extensions.ValueConverter.IEnumerableTypeConverterBase<T, P>
  nameWithType.vb: IEnumerableTypeConverterBase(Of T, P)
  fullName.vb: H.Extensions.ValueConverter.IEnumerableTypeConverterBase(Of T, P)
  name.vb: IEnumerableTypeConverterBase(Of T, P)
  spec.csharp:
  - uid: H.Extensions.ValueConverter.IEnumerableTypeConverterBase`2
    name: IEnumerableTypeConverterBase
    href: H.Extensions.ValueConverter.IEnumerableTypeConverterBase-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: P
  - name: '>'
  spec.vb:
  - uid: H.Extensions.ValueConverter.IEnumerableTypeConverterBase`2
    name: IEnumerableTypeConverterBase
    href: H.Extensions.ValueConverter.IEnumerableTypeConverterBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: P
  - name: )
- uid: H.Extensions.ValueConverter.IEnumerableTypeConverterBase`1
  commentId: T:H.Extensions.ValueConverter.IEnumerableTypeConverterBase`1
  href: H.Extensions.ValueConverter.IEnumerableTypeConverterBase-1.html
  name: IEnumerableTypeConverterBase<T>
  nameWithType: IEnumerableTypeConverterBase<T>
  fullName: H.Extensions.ValueConverter.IEnumerableTypeConverterBase<T>
  nameWithType.vb: IEnumerableTypeConverterBase(Of T)
  fullName.vb: H.Extensions.ValueConverter.IEnumerableTypeConverterBase(Of T)
  name.vb: IEnumerableTypeConverterBase(Of T)
  spec.csharp:
  - uid: H.Extensions.ValueConverter.IEnumerableTypeConverterBase`1
    name: IEnumerableTypeConverterBase
    href: H.Extensions.ValueConverter.IEnumerableTypeConverterBase-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: H.Extensions.ValueConverter.IEnumerableTypeConverterBase`1
    name: IEnumerableTypeConverterBase
    href: H.Extensions.ValueConverter.IEnumerableTypeConverterBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: H.Extensions.ValueConverter.DependencyConverterBase
  commentId: T:H.Extensions.ValueConverter.DependencyConverterBase
  href: H.Extensions.ValueConverter.DependencyConverterBase.html
  name: DependencyConverterBase
  nameWithType: DependencyConverterBase
  fullName: H.Extensions.ValueConverter.DependencyConverterBase
- uid: H.Extensions.ValueConverter.MarkupValueConverterBase
  commentId: T:H.Extensions.ValueConverter.MarkupValueConverterBase
  parent: H.Extensions.ValueConverter
  href: H.Extensions.ValueConverter.MarkupValueConverterBase.html
  name: MarkupValueConverterBase
  nameWithType: MarkupValueConverterBase
  fullName: H.Extensions.ValueConverter.MarkupValueConverterBase
- uid: H.Extensions.ValueConverter.MarkupMultiValueConverterBase
  commentId: T:H.Extensions.ValueConverter.MarkupMultiValueConverterBase
  parent: H.Extensions.ValueConverter
  href: H.Extensions.ValueConverter.MarkupMultiValueConverterBase.html
  name: MarkupMultiValueConverterBase
  nameWithType: MarkupMultiValueConverterBase
  fullName: H.Extensions.ValueConverter.MarkupMultiValueConverterBase
- uid: H.Extensions.ValueConverter.GetGemeotryFromStringConverter
  commentId: T:H.Extensions.ValueConverter.GetGemeotryFromStringConverter
  href: H.Extensions.ValueConverter.GetGemeotryFromStringConverter.html
  name: GetGemeotryFromStringConverter
  nameWithType: GetGemeotryFromStringConverter
  fullName: H.Extensions.ValueConverter.GetGemeotryFromStringConverter
- uid: H.Extensions.ValueConverter.GetWriteObjectConverter
  commentId: T:H.Extensions.ValueConverter.GetWriteObjectConverter
  href: H.Extensions.ValueConverter.GetWriteObjectConverter.html
  name: GetWriteObjectConverter
  nameWithType: GetWriteObjectConverter
  fullName: H.Extensions.ValueConverter.GetWriteObjectConverter
- uid: H.Extensions.ValueConverter
  commentId: N:H.Extensions.ValueConverter
  href: H.html
  name: H.Extensions.ValueConverter
  nameWithType: H.Extensions.ValueConverter
  fullName: H.Extensions.ValueConverter
  spec.csharp:
  - uid: H
    name: H
    href: H.html
  - name: .
  - uid: H.Extensions
    name: Extensions
    href: H.Extensions.html
  - name: .
  - uid: H.Extensions.ValueConverter
    name: ValueConverter
    href: H.Extensions.ValueConverter.html
  spec.vb:
  - uid: H
    name: H
    href: H.html
  - name: .
  - uid: H.Extensions
    name: Extensions
    href: H.Extensions.html
  - name: .
  - uid: H.Extensions.ValueConverter
    name: ValueConverter
    href: H.Extensions.ValueConverter.html
